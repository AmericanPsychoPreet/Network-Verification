import os
from NetworkVerificationBot import app, VERIFICATION_CHANNEL_ID,START_IMG as NETWORK_IMG
from pyrogram import filters 
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup,CallbackQuery 
    
VERIFY_MSG="""
Hello, In order to verify yourself, Are you accepting our Tos (Terms of Service)?
"""
VERIFY_BUTTONS= [
         [
           InlineKeyboardButton (text="yes i accept",callback_data="yes_verify")
         ],
         [
          InlineKeyboardButton (text="no,i decline",callback_data="no_verify")        
         ],
      ]



@app.on_message(filters.command("verify"))
async def verify(_,msg):
    await msg.reply_text(VERIFY_MSG,
      reply_markup=InlineKeyboardMarkup(VERIFY_BUTTONS)
      )

@app.on_callback_query(filters.regex("yes_verify"))
async def yos(_, CallbackQuery):
    query = CallbackQuery.message
    await query.edit_text("click on /continue to proceed")
        
      
@app.on_callback_query(filters.regex("no_verify"))
async def nope(_, CallbackQuery):
    query=CallbackQuery.message
    await query.edit_text("please consider to come back again")
  

@app.on_message(filters.command("continue"))
async def verify(client,msg):
    id=msg.chat.id   
    first_name = msg.from_user.first_name
    username = msg.from_user.username
    user_id = msg.from_user.id
    dc_id = msg.from_user.dc_id            
    full_name = await client.ask(id,"·¥° ú·¥Ä·¥õ …™s  è·¥è·¥ú Ä “ì·¥ú ü ü …¥·¥Ä·¥ç·¥á ?")
    age = await client.ask(id," ú·¥è·¥° ·¥è ü·¥Ö ·¥Ä Ä·¥á  è·¥è·¥ú ?")
    gender = await client.ask(id,"·¥° ú·¥Ä·¥õ's  è·¥è·¥ú Ä …¢·¥á…¥·¥Ö·¥á Ä ?")
    channels = await client.ask(id," è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥ás")
    groups = await client.ask(id," è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥ás")
    bots = await client.ask(id," è·¥è·¥ú Ä  ô·¥è·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥ás")
    country = await client.ask(id,"“ì Ä·¥è·¥ç ·¥° ú…™·¥Ñ ú ·¥Ñ·¥è·¥ú…¥·¥õ Ä è  è·¥è·¥ú  ô·¥á ü·¥è…¥…¢ ·¥õ·¥è ?")
    skills = await client.ask(id," ú·¥Ä·¥†·¥á ·¥Ä…¥ è s·¥ã…™ ü ü ?")
    github = await client.ask(id," ú·¥Ä·¥†·¥á …¢…™·¥õ ú·¥ú ô ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú·¥õ..?\n…¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  ü…™…¥·¥ã")
    about = await client.ask(id,"·¥õ·¥á ü ü ·¥ç·¥á s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Äs·¥á ü“ì.")
    tag = await client.ask(id,"·¥Ñ·¥Ä…¥  è·¥è·¥ú ·¥ò·¥ú·¥õ ·¥è·¥ú Ä …¥·¥á·¥õ·¥°·¥è Ä·¥ã ·¥õ·¥Ä…¢ ·¥è…¥  è·¥è·¥ú Ä …¥·¥Ä·¥ç·¥á ?")
    reason = await client.ask(id," ú·¥Ä·¥†·¥á ·¥Ä…¥ è   Ä·¥á·¥Äs·¥è…¥ ·¥õ·¥è ·¥ä·¥è…™…¥…™…¥…¢ ·¥è·¥ú Ä …¥·¥á·¥õ·¥°·¥è Ä·¥ã, …™“ì  ú·¥Ä·¥†·¥á ·¥õ ú·¥á…¥ ·¥° Ä…™·¥õ·¥á …™·¥õ ·¥Ö·¥è·¥°…¥.")    
    await app.send_message(VERIFICATION_CHANNEL_ID,
    f"""
ùôµùôæùöÅùôº
“ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á : {first_name}
·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á : {username}
·¥ús·¥á Ä …™·¥Ö : {user_id}
·¥Ö·¥Ñ …™·¥Ö : {dc_id}   
“ì·¥ú ü ü …¥·¥Ä·¥ç·¥á : {full_name.text}
·¥Ä…¢·¥á : {age.text}
…¢·¥á…¥·¥Ö·¥á Ä : {gender.text}
·¥Ñ ú·¥Ä…¥…¥·¥á üs : {channels.text}
…¢ Ä·¥è·¥ú·¥òs : {groups.text}
 ô·¥è·¥õs : {bots.text}
·¥Ñ·¥è·¥ú…¥·¥õ Ä è : {country.text}
s·¥ã…™ ü üs : {skills.text}
…¢…™·¥õ ú·¥ú ô  ü…™…¥·¥ã : {github.text}
·¥Ä ô·¥è·¥ú·¥õ : {about.text}
·¥Ñ·¥Ä…¥ ·¥ò·¥ú·¥õ …¥·¥á·¥õ·¥°·¥è Ä·¥ã's ·¥õ·¥Ä…¢ : {tag.text}
 Ä·¥á·¥Äs·¥è…¥ : {reason.text}
""",
      reply_markup=InlineKeyboardMarkup (VERIFY_BUTTONS)
     )
    await msg.reply_text("ok")
    


 
